import java.util.LinkedList;
import java.util.List;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.microsoft.graph.logger.DefaultLogger;
import com.microsoft.graph.logger.LoggerLevel;
import com.microsoft.graph.models.extensions.*;
import com.microsoft.graph.options.Option;
import com.microsoft.graph.options.QueryOption;
import com.microsoft.graph.requests.extensions.*;

import javax.xml.bind.DatatypeConverter;

/**
 * Graph
 */
public class Graph {

    private static IGraphServiceClient graphClient = null;
    private static SimpleAuthProvider authProvider = null;

    private static void ensureGraphClient(String accessToken) {
        if (graphClient == null) {
            // Create the auth provider
            authProvider = new SimpleAuthProvider(accessToken);

            // Create default logger to only log errors
            DefaultLogger logger = new DefaultLogger();
            logger.setLoggingLevel(LoggerLevel.ERROR);

            // Build a Graph client
            graphClient = GraphServiceClient.builder()
                    .authenticationProvider(authProvider)
                    .logger(logger)
                    .buildClient();
        }
    }

    public static User getUser(String accessToken) {
        ensureGraphClient(accessToken);

        // GET /me to get authenticated user
        User me = graphClient
                .me()
                .buildRequest()
                .get();

        return me;
    }
    public static List<Event> getEvents(String accessToken) {
        ensureGraphClient(accessToken);

        // Use QueryOption to specify the $orderby query parameter
        final List<Option> options = new LinkedList<Option>();
        // Sort results by createdDateTime, get newest first
        options.add(new QueryOption("orderby", "createdDateTime DESC"));

        // GET /me/events
        IEventCollectionPage eventPage = graphClient
                .me()
                .events()
                .buildRequest(options)
                .select("subject,organizer,start,end")
                .get();

        return eventPage.getCurrentPage();
    }

    public static List<Message> getMsg(String accessToken) {
        ensureGraphClient(accessToken);

        // Use QueryOption to specify the $orderby query parameter
        //final List<Option> options = new LinkedList<Option>();
        // Sort results by createdDateTime, get newest first
   //     options.add(new QueryOption("orderby", "createdDateTime DESC"));

        // GET /me/events

        // GET /me/events
        IMailFolderCollectionPage eventPageX = graphClient
                .me()
                .mailFolders()
                .buildRequest()
                .get();

        List<MailFolder> currentPage = eventPageX.getCurrentPage();

        for (MailFolder mf : currentPage) {
            System.out.println("************************");
            System.out.println("Raw object=" + mf.getRawObject());
            System.out.println("Id=" + mf.id);
            System.out.println("Name=" + mf.displayName);
            System.out.println("Total count item=" + mf.totalItemCount);
            System.out.println("msg=" + mf.messages);
            System.out.println("************************");
        }


        IMessageCollectionPage eventPage = graphClient
                .me()
                .messages()
                .buildRequest()
                .get();


           //     .events()
          //      .buildRequest(options)
              //  .select("subject,organizer,start,end")
             //   .get();

        return eventPage.getCurrentPage();
    }
    public static List<Attachment> getA(String accessToken, String id) {
        ensureGraphClient(accessToken);

        // Use QueryOption to specify the $orderby query parameter
        //final List<Option> options = new LinkedList<Option>();
        // Sort results by createdDateTime, get newest first
        //     options.add(new QueryOption("orderby", "createdDateTime DESC"));

        // GET /me/events
        //GET /me/messages/{id}/attachments/{id}
        IAttachmentCollectionPage iAttachmentCollectionPage = graphClient
                .me()
                .messages(id)
                .attachments()
                .buildRequest()
                .get();

        List<Attachment> currentPage = iAttachmentCollectionPage.getCurrentPage();
        Attachment attachment = currentPage.get(0);
        String ids = attachment.id;
        Attachment attachment1 = graphClient.me().messages(id).attachments(ids).buildRequest().get();
        int i = attachment1.size.intValue();
        JsonObject rawObject = attachment1.getRawObject();
        String contentType = attachment1.contentType;
        String name = attachment1.name;
        byte[] bytes = DatatypeConverter.parseBase64Binary(attachment1.contentType);
        System.out.println();


        StringBuilder sb = new StringBuilder();

// GET /users/{id | userPrincipalName}/messages/{id}/attachments/{id}/$value





        return iAttachmentCollectionPage.getCurrentPage();
    }

}
